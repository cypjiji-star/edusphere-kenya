rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    // These functions make the rules easier to read and maintain.
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isDeveloper() {
      return isAuthenticated() && request.auth.token.role == 'developer';
    }
    
    function isSchoolAdmin(schoolId) {
      return isAuthenticated() && request.auth.token.role == 'admin' && request.auth.token.schoolId == schoolId;
    }

    function isTeacher(schoolId) {
      return isAuthenticated() && request.auth.token.role == 'teacher' && request.auth.token.schoolId == schoolId;
    }

    function isParent(schoolId) {
      return isAuthenticated() && request.auth.token.role == 'parent' && request.auth.token.schoolId == schoolId;
    }
    
    function isUserInSchool(schoolId) {
      return isAuthenticated() && request.auth.token.schoolId == schoolId;
    }

    // --- Developer-Only Collections ---
    // The 'schools' collection can only be managed by developers.
    match /schools/{schoolId} {
      allow read, write: if isDeveloper();

      // --- School-Specific Subcollections ---
      // All data is nested under a specific school document.

      // Default deny all access to subcollections unless specified below.
      match /{document=**} {
        allow read, write: if false;
      }
      
      // PUBLIC DATA: School branding for login page
      // Anyone can read this, only admins/devs can write.
      match /schoolProfile/{profileId} {
        allow read: if true;
        allow write: if isDeveloper() || isSchoolAdmin(schoolId);
      }
      
      // USER MANAGEMENT:
      // Admins can manage users within their school.
      // Teachers/Parents can only read their own user document.
      match /users/{userId} {
        allow read: if isUserInSchool(schoolId) && (isDeveloper() || isSchoolAdmin(schoolId) || request.auth.uid == userId);
        allow create: if isDeveloper() || isSchoolAdmin(schoolId);
        allow update: if isDeveloper() || isSchoolAdmin(schoolId) || (isAuthenticated() && request.auth.uid == userId); // Allow users to update their own profile
        allow delete: if isDeveloper() || isSchoolAdmin(schoolId);
      }
      
      // STUDENTS:
      // Admins/Teachers can manage students. Parents can only view their own children.
      match /students/{studentId} {
        allow read: if (isDeveloper() || isSchoolAdmin(schoolId) || isTeacher(schoolId)) || (isParent(schoolId) && studentId in get(/databases/$(database)/documents/schools/$(schoolId)/users/$(request.auth.uid)).data.children);
        allow create, update, delete: if isDeveloper() || isSchoolAdmin(schoolId);
        
        // Student-specific subcollections like grades and transactions
        match /grades/{gradeId} {
            allow read: if (isDeveloper() || isSchoolAdmin(schoolId) || isTeacher(schoolId)) || (isParent(schoolId) && studentId in get(/databases/$(database)/documents/schools/$(schoolId)/users/$(request.auth.uid)).data.children);
            allow create, write: if isDeveloper() || isSchoolAdmin(schoolId) || isTeacher(schoolId);
        }

        match /transactions/{transactionId} {
             allow read: if (isDeveloper() || isSchoolAdmin(schoolId)) || (isParent(schoolId) && studentId in get(/databases/$(database)/documents/schools/$(schoolId)/users/$(request.auth.uid)).data.children);
             allow create, write: if isDeveloper() || isSchoolAdmin(schoolId);
        }
      }
      
      // ACADEMICS, FINANCE, COMMUNICATION (Admin/Teacher access)
      // Generic rule for collections managed primarily by Admins and Teachers.
      match /{collectionName}/{docId}
        where collectionName in ['classes', 'subjects', 'assignments', 'attendance', 'lesson-plans', 'announcements', 'calendar-events', 'expenses', 'feeStructure', 'discounts', 'incidents', 'medications', 'teams', 'library-resources', 'support-tickets'] {
        
        allow read: if isUserInSchool(schoolId); // Anyone logged into the school can view
        allow create, update, delete: if isDeveloper() || isSchoolAdmin(schoolId) || isTeacher(schoolId);
        
        // Nested collections (e.g., assignment submissions, team members)
        match /{nestedCollection}/{nestedId} {
            allow read: if isUserInSchool(schoolId);
            allow write: if isDeveloper() || isSchoolAdmin(schoolId) || isTeacher(schoolId);
        }
      }
    }
    
    // PLATFORM-LEVEL SETTINGS (Developer only)
    match /platformSettings/{docId} {
      allow read, write: if isDeveloper();
    }
    
    // ROLES (Developer managed)
    match /roles/{role} {
      allow read: if isAuthenticated();
      allow write: if isDeveloper();
    }
    
    // AUDIT LOGS (Write-only for the system, read for Developers)
    match /audit_logs/{logId} {
      allow read: if isDeveloper();
      allow write: if isAuthenticated(); // Should be further restricted to backend functions in production
    }
  }
}