
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles
    function isDeveloper() {
      // Check if a developer document exists with the user's UID.
      return exists(
        /databases/$(database)/documents/developers/$(request.auth.uid)
      );
    }

    function isSchoolAdmin(schoolId) {
      return get(/databases/$(database)/documents/schools/$(schoolId)/users/$(request.auth.uid)).data.role == 'Admin';
    }

    function isSchoolTeacher(schoolId) {
      return get(/databases/$(database)/documents/schools/$(schoolId)/users/$(request.auth.uid)).data.role == 'Teacher';
    }

    function isSchoolParent(schoolId) {
      return get(/databases/$(database)/documents/schools/$(schoolId)/users/$(request.auth.uid)).data.role == 'Parent';
    }
    
    function isSignedIn() {
        return request.auth != null;
    }
    
    function isOwner(userId) {
        return request.auth.uid == userId;
    }


    // Platform-level collections
    match /developers/{developerId} {
      // Allow creating the very first developer document if the collection is empty.
      // This is for one-time setup.
      allow create: if size(get(/databases/$(database)/documents/developers).data) == 0;

      // Allow developers to read/write their own document or any document if they are a developer.
      allow read, write: if isDeveloper();
    }
    
    match /platformRoles/{roleId} {
        allow read, write: if isDeveloper();
    }
    
    match /platformSettings/{settingId} {
        allow read, write: if isDeveloper();
    }

    // School data is isolated by schoolId
    match /schools/{schoolId} {
        // School profile is public
        allow get;
        // Only developers can create/update school documents
        allow list, write: if isDeveloper();

        // Rules for all subcollections within a school
        match /{collection}/{docId=**} {
            // Admins of a specific school have full access to their school's data
            allow read, write: if isSchoolAdmin(schoolId);
        }
        
        // Specific rules for fine-grained access
        
        // Students can be read by their teacher or parent
        match /students/{studentId} {
            allow get: if isSchoolTeacher(schoolId) || (isSchoolParent(schoolId) && resource.data.parentId == request.auth.uid);
            allow list: if isSchoolAdmin(schoolId) || isSchoolTeacher(schoolId);
        }
        
        // Grades can only be read by the student's own parent, or a teacher/admin
         match /students/{studentId}/grades/{gradeId} {
            allow get, list: if isSchoolAdmin(schoolId) || isSchoolTeacher(schoolId) || (isSchoolParent(schoolId) && studentId in get(/databases/$(database)/documents/schools/$(schoolId)/users/$(request.auth.uid)).data.children);
        }

        // Attendance can only be read by the student's own parent, or a teacher/admin
        match /attendance/{attendanceId} {
             allow get, list: if isSchoolAdmin(schoolId) || isSchoolTeacher(schoolId) || (isSchoolParent(schoolId) && resource.data.studentId in get(/databases/$(database)/documents/schools/$(schoolId)/users/$(request.auth.uid)).data.children);
        }
        
        // Announcements are readable by all authenticated school users
        match /announcements/{announcementId} {
            allow get, list: if isSchoolAdmin(schoolId) || isSchoolTeacher(schoolId) || isSchoolParent(schoolId);
            // Only Admins or Teachers can create/update
            allow write: if isSchoolAdmin(schoolId) || isSchoolTeacher(schoolId);
        }

        // Calendar events are readable by all authenticated school users
        match /calendar-events/{eventId} {
             allow get, list: if isSchoolAdmin(schoolId) || isSchoolTeacher(schoolId) || isSchoolParent(schoolId);
             allow write: if isSchoolAdmin(schoolId) || isSchoolTeacher(schoolId);
        }
        
        // Default deny for any paths not explicitly matched
        match /{path=**} {
            allow read, write: if false;
        }
    }
  }
}
