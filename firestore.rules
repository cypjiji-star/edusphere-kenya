rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // Checks if the user has the 'developer' role in their custom token.
    function isDeveloper() {
      return request.auth.token.role == 'developer';
    }

    // Checks if the user is an admin for a specific school.
    function isAdmin(schoolId) {
      return request.auth.token.schoolId == schoolId && request.auth.token.role == 'admin';
    }

    // Checks if the user is a teacher in a specific school.
    function isTeacher(schoolId) {
      return request.auth.token.schoolId == schoolId && request.auth.token.role == 'teacher';
    }

    // Checks if the user is a parent in a specific school.
    function isParent(schoolId) {
      return request.auth.token.schoolId == schoolId && request.auth.token.role == 'parent';
    }

    // Checks if the authenticated user belongs to the school they are trying to access.
    function isUserInSchool(schoolId) {
      return request.auth != null && request.auth.token.schoolId == schoolId;
    }

    // --- Global Collections ---

    // The `schools` collection can only be read or written to by a developer.
    // This protects the list of all schools.
    match /schools/{schoolId} {
      allow read, write: if isDeveloper();
    }
    
    // The `schoolProfile` collection contains public branding info.
    // Allow anyone to read it for the login page, but only developers can write to it.
    match /schoolProfile/{profileId} {
      allow get, list: if true;
      allow write: if isDeveloper();
    }

    // --- School-Specific Subcollections ---
    
    // By default, deny all access to documents nested under a school.
    // Specific rules below will grant access.
    match /schools/{schoolId}/{document=**} {
      allow read, write: if false;
    }

    // Rules for students, classes, users, etc., within a school.
    // Access is granted only if the user belongs to the school.
    match /schools/{schoolId}/students/{studentId} {
      allow get, list: if isUserInSchool(schoolId);
      allow create, update, delete: if isAdmin(schoolId);
    }

    match /schools/{schoolId}/users/{userId} {
      allow get, list: if isUserInSchool(schoolId);
      allow create, update, delete: if isAdmin(schoolId);
    }

    match /schools/{schoolId}/classes/{classId} {
      allow get, list: if isUserInSchool(schoolId);
      allow create, update, delete: if isAdmin(schoolId);
    }
    
    match /schools/{schoolId}/subjects/{subjectId} {
      allow get, list: if isUserInSchool(schoolId);
      allow create, update, delete: if isAdmin(schoolId);
    }

    match /schools/{schoolId}/assignments/{assignmentId} {
      allow get, list: if isUserInSchool(schoolId);
      allow create, update, delete: if isTeacher(schoolId) || isAdmin(schoolId);
    }
    
    match /schools/{schoolId}/assignments/{assignmentId}/submissions/{submissionId} {
        allow read, write: if isTeacher(schoolId) || isAdmin(schoolId);
    }

    match /schools/{schoolId}/attendance/{attendanceId} {
      allow read, write: if isTeacher(schoolId) || isAdmin(schoolId);
    }

    match /schools/{schoolId}/announcements/{announcementId} {
      allow read: if isUserInSchool(schoolId);
      allow create, update, delete: if isAdmin(schoolId) || isTeacher(schoolId);
    }
    
    match /schools/{schoolId}/calendar-events/{eventId} {
      allow read: if isUserInSchool(schoolId);
      allow create, update, delete: if isAdmin(schoolId);
    }

    match /schools/{schoolId}/conversations/{conversationId}/{message=**} {
      // More complex rules needed here based on participants, but this is a safe start.
      allow read, write: if isUserInSchool(schoolId);
    }

    // --- Role-Specific Rules ---
    
    // `roles` collection can be read by admins, but only changed by developers.
    match /roles/{roleId} {
      allow get: if isDeveloper() || isAdmin(request.auth.token.schoolId);
      allow list, write: if isDeveloper();
    }
    
    // `audit_logs` are read-only for admins and developers. No one can write them directly.
    match /audit_logs/{logId} {
        allow read: if isDeveloper() || isAdmin(request.auth.token.schoolId);
        allow write: if false;
    }
    
     // Any other top-level collection is locked down unless specified above.
    match /{path=**} {
      allow read, write: if false;
    }
  }
}